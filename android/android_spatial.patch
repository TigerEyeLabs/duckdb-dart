diff --git a/CMakeLists.txt b/CMakeLists.txt
index 9579238..6f401b5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -54,6 +54,7 @@ if(NOT EXISTS ${CMAKE_BINARY_DIR}/deps)
       -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
       -DVCPKG_INSTALLED_DIR='${CMAKE_BINARY_DIR}/vcpkg_installed'
       -DCMAKE_TOOLCHAIN_FILE='${CMAKE_TOOLCHAIN_FILE}'
+      -DANDROID_ABI='${ANDROID_ABI}'
       -DVCPKG_TARGET_TRIPLET='${VCPKG_TARGET_TRIPLET}'
       -S ${CMAKE_CURRENT_SOURCE_DIR}/deps -B ${CMAKE_BINARY_DIR}/deps
     RESULT_VARIABLE DEPENDENCIES_GENERATE_RESULT)
@@ -96,7 +97,7 @@ find_package(EXPAT REQUIRED)
 find_package(GeographicLib REQUIRED)
 
 # Important: The link order matters, its the reverse order of dependency
-set(EXTENSION_DEPENDENCIES 
+set(EXTENSION_DEPENDENCIES
   GDAL::GDAL
   GEOS::geos_c
   PROJ::proj
diff --git a/Makefile b/Makefile
index 830e5a4..ecc4df8 100644
--- a/Makefile
+++ b/Makefile
@@ -157,7 +157,7 @@ clean:
 
 # WASM config
 VCPKG_EMSDK_FLAGS=-DVCPKG_CHAINLOAD_TOOLCHAIN_FILE=$(EMSDK)/upstream/emscripten/cmake/Modules/Platform/Emscripten.cmake
-WASM_COMPILE_TIME_COMMON_FLAGS=-DWASM_LOADABLE_EXTENSIONS=1 -DBUILD_EXTENSIONS_ONLY=1 -DSKIP_EXTENSIONS="parquet;json" $(VCPKG_EMSDK_FLAGS)
+WASM_COMPILE_TIME_COMMON_FLAGS=-DWASM_LOADABLE_EXTENSIONS=1 -DBUILD_EXTENSIONS_ONLY=1 -DSKIP_EXTENSIONS="parquet;json" ${TOOLCHAIN_FLAGS} $(VCPKG_EMSDK_FLAGS)
 WASM_CXX_MVP_FLAGS=
 WASM_CXX_EH_FLAGS=$(WASM_CXX_MVP_FLAGS) -fwasm-exceptions -DWEBDB_FAST_EXCEPTIONS=1
 WASM_CXX_THREADS_FLAGS=$(WASM_COMPILE_TIME_EH_FLAGS) -DWITH_WASM_THREADS=1 -DWITH_WASM_SIMD=1 -DWITH_WASM_BULK_MEMORY=1 -pthread
diff --git a/deps/CMakeLists.txt b/deps/CMakeLists.txt
index f26869f..dd8f3d9 100644
--- a/deps/CMakeLists.txt
+++ b/deps/CMakeLists.txt
@@ -37,49 +37,51 @@ if (EMSCRIPTEN)
 endif()
 
 # ZLIB
-ExternalProject_Add(
-    ZLIB
-    URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/zlib1213.zip
-    CONFIGURE_HANDLED_BY_BUILD TRUE
-    CMAKE_ARGS
-    -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
-    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
-    -DCMAKE_MODULE_PATH=${LOCAL_INSTALL_DIR}/lib/cmake
-    -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
-    -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
-    -DCMAKE_POSITION_INDEPENDENT_CODE=ON
-    -DBUILD_SHARED_LIBS=OFF
-    ${CMAKE_FLAGS_POINTER_SIZE}
-    # vcpkg options
-    -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
-    -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
-    -DCMAKE_TOOLCHAIN_FILE='${CMAKE_TOOLCHAIN_FILE}'
-    -DVCPKG_TARGET_TRIPLET='${VCPKG_TARGET_TRIPLET}'
-)
+# ExternalProject_Add(
+#     ZLIB
+#     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/zlib1213.zip
+#     CONFIGURE_HANDLED_BY_BUILD TRUE
+#     CMAKE_ARGS
+#     -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
+#     -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
+#     -DCMAKE_MODULE_PATH=${LOCAL_INSTALL_DIR}/lib/cmake
+#     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
+#     -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
+#     -DCMAKE_POSITION_INDEPENDENT_CODE=ON
+#     -DBUILD_SHARED_LIBS=OFF
+#     ${CMAKE_FLAGS_POINTER_SIZE}
+#     # vcpkg options
+#     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
+#     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
+#     -DCMAKE_TOOLCHAIN_FILE='${CMAKE_TOOLCHAIN_FILE}'
+#     -DVCPKG_TARGET_TRIPLET='${VCPKG_TARGET_TRIPLET}'
+# )
 
 # Use the system sqlite binary on Emscripten, iOS and Android
 if (EMSCRIPTEN OR IOS OR ANDROID)
   find_program(EXE_SQLITE3 sqlite3)
 endif()
-set(GDAL_DEPENDENCIES ${GDAL_DEPENDENCIES} ZLIB)
+set(GDAL_DEPENDENCIES ${GDAL_DEPENDENCIES})
 
 # SQLite3
 ExternalProject_Add(
     SQLITE3
-    DEPENDS ZLIB
     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/sqlite3
     CONFIGURE_HANDLED_BY_BUILD TRUE
     CMAKE_ARGS
     -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
+    -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
     -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
     -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
     -DCMAKE_TOOLCHAIN_FILE='${CMAKE_TOOLCHAIN_FILE}'
     -DVCPKG_TARGET_TRIPLET='${VCPKG_TARGET_TRIPLET}'
+    -DZLIB_USE_STATIC_LIBS=ON # Propagate to FindZLIB.cmake
 )
 set(GDAL_DEPENDENCIES ${GDAL_DEPENDENCIES} SQLITE3)
 
@@ -87,10 +89,9 @@ if(SPATIAL_USE_NETWORK)
 # CURL
 ExternalProject_Add(
     CURL
-    DEPENDS ZLIB
     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/curl-7.87.0.zip
     CONFIGURE_HANDLED_BY_BUILD TRUE
-    CMAKE_ARGS 
+    CMAKE_ARGS
     -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
     -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
     -DCMAKE_DEBUG_POSTFIX=${} # Do not append "d" to the library name when building in debug mode
@@ -110,6 +111,7 @@ ExternalProject_Add(
     -DCURL_USE_LIBSSH=OFF
     -DOPENSSL_USE_STATIC_LIBS=ON # Propagate to FindOpenSSL.cmake
     -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}
+    -DZLIB_USE_STATIC_LIBS=ON # Propagate to FindZLIB.cmake
 )
 set(GDAL_DEPENDENCIES ${GDAL_DEPENDENCIES} CURL)
 endif()
@@ -118,7 +120,7 @@ endif()
 # PROJ
 ExternalProject_Add(
     PROJ
-    DEPENDS SQLITE3 ZLIB
+    DEPENDS SQLITE3
     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/proj-9.1.1.zip
     CONFIGURE_HANDLED_BY_BUILD TRUE
     PATCH_COMMAND patch -p1 < "${CMAKE_CURRENT_LIST_DIR}/patches/proj${PATCH_NAME_ENDING}.patch"
@@ -131,6 +133,7 @@ ExternalProject_Add(
     -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
     ${CMAKE_PROJ_FLAGS}
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
@@ -142,6 +145,10 @@ ExternalProject_Add(
     -DBUILD_TESTING=OFF
     -DENABLE_CURL=OFF
     -DENABLE_TIFF=OFF
+    -DSQLITE3_VERSION=3.40.1
+    -DSQLITE3_LIBRARY=${LOCAL_INSTALL_DIR}/lib/libsqlite3.a
+    -DSQLITE3_INCLUDE_DIR=${LOCAL_INSTALL_DIR}/include
+    -DZLIB_USE_STATIC_LIBS=ON # Propagate to FindZLIB.cmake
 )
 set(GDAL_DEPENDENCIES ${GDAL_DEPENDENCIES} PROJ)
 
@@ -151,7 +158,7 @@ ExternalProject_Add(
     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/expat-2.5.0.tar.bz2
     CONFIGURE_HANDLED_BY_BUILD TRUE
     PATCH_COMMAND patch -p1 < "${CMAKE_CURRENT_LIST_DIR}/patches/expat${PATCH_NAME_ENDING}.patch"
-    CMAKE_ARGS 
+    CMAKE_ARGS
     # CMake options
     -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
     -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
@@ -159,6 +166,7 @@ ExternalProject_Add(
     -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
     -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
@@ -179,7 +187,7 @@ ExternalProject_Add(
     GEOS
     URL ${CMAKE_CURRENT_SOURCE_DIR}/vendor/geos-3.13.0.tar.bz2
     CONFIGURE_HANDLED_BY_BUILD TRUE
-    CMAKE_ARGS 
+    CMAKE_ARGS
     # CMake options
     -DCMAKE_INSTALL_PREFIX:PATH=${LOCAL_INSTALL_DIR}
     -DCMAKE_PREFIX_PATH=${LOCAL_INSTALL_DIR}
@@ -187,6 +195,7 @@ ExternalProject_Add(
     -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
     -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
@@ -214,6 +223,7 @@ ExternalProject_Add(
     -DCMAKE_OSX_ARCHITECTURES=${CMAKE_OSX_ARCHITECTURES_PACKED}
     -DCMAKE_POSITION_INDEPENDENT_CODE=ON
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
@@ -225,6 +235,10 @@ ExternalProject_Add(
     -DBUILD_DOCUMENTATION=OFF
 )
 
+if(${CMAKE_SIZEOF_VOID_P} LESS 8)
+    set(BUILD_WITHOUT_64BIT_OFFSET 1)
+endif()
+
 # GDAL
 ExternalProject_Add(
     GDAL
@@ -242,6 +256,7 @@ ExternalProject_Add(
     -DCMAKE_MODULE_PATH=${LOCAL_INSTALL_DIR}/lib/cmake
     -DCMAKE_FIND_ROOT_PATH=${LOCAL_INSTALL_DIR}
     ${CMAKE_FLAGS_POINTER_SIZE}
+    -DANDROID_ABI=${ANDROID_ABI}
     # vcpkg options
     -DVCPKG_MANIFEST_DIR='${VCPKG_MANIFEST_DIR}'
     -DVCPKG_INSTALLED_DIR='${VCPKG_INSTALLED_DIR}'
@@ -254,7 +269,7 @@ ExternalProject_Add(
     # Build static library
     -DBUILD_SHARED_LIBS=OFF
     ${CMAKE_GDAL_FLAGS}
-    
+
     # Arrow
     -DGDAL_USE_ARROW=OFF
     -DARROW_USE_STATIC_LIBRARIES=OFF
@@ -271,7 +286,7 @@ ExternalProject_Add(
     -DGDAL_USE_OPENSSL=${SPATIAL_USE_NETWORK}
     -DOPENSSL_USE_STATIC_LIBS=ON # Propagate to FindOpenSSL.cmake
     -DOPENSSL_ROOT_DIR=${OPENSSL_ROOT_DIR}
-    
+
     # This is not true, but a bug in gdal's cmake files
     -DACCEPT_MISSING_SQLITE3_RTREE:BOOL=ON
     -DACCEPT_MISSING_SQLITE3_MUTEX_ALLOC:BOOL=ON
@@ -342,6 +357,12 @@ ExternalProject_Add(
 
     # Remove bindings
     -DBUILD_PYTHON_BINDINGS=OFF
+
+    # Zlib
+    -DZLIB_USE_STATIC_LIBS=ON # Propagate to FindZLIB.cmake
+
+    # are we building for 32 bit?
+    -DBUILD_WITHOUT_64BIT_OFFSET=${BUILD_WITHOUT_64BIT_OFFSET}
 )
 
 
diff --git a/vcpkg.json b/vcpkg.json
index 0fa0cf2..1e8d8b7 100644
--- a/vcpkg.json
+++ b/vcpkg.json
@@ -1,5 +1,6 @@
 {
     "dependencies": [
-       "openssl"
+       "openssl",
+       "zlib"
     ]
 }
